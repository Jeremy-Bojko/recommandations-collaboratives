# Generated by Django 3.2.18 on 2023-09-28 15:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import tagging.fields
import urbanvitaliz.apps.tasks.models
import uuid

#
# defining data migration from existing projects tables to new tasks ones
# TODO run ./manage.py sqlsequencereset tasks to update id sequences forward
# TODO run ./manage.py sqlsequencereset projects to update id sequences backward

TASK_MIGRATION = """
INSERT INTO {target} (
    "id",
    "order",
    "public",
    "priority",
    "created_on",
    "updated_on",
    "tags",
    "intent",
    "content",
    "deadline",
    "visited",
    "refused",
    "done",
    "status",
    "deleted",
    "contact_id",
    "created_by_id",
    "project_id",
    "resource_id",
    "site_id",
    "topic_id"
)
SELECT
    "id",
    "order",
    "public",
    "priority",
    "created_on",
    "updated_on",
    "tags",
    "intent",
    "content",
    "deadline",
    "visited",
    "refused",
    "done",
    "status",
    "deleted",
    "contact_id",
    "created_by_id",
    "project_id",
    "resource_id",
    "site_id",
    "topic_id"
FROM
    {source} ;
"""

TASKFOLLOWUP_MIGRATION = """
INSERT INTO {target} (
    "id",
    "status",
    "timestamp",
    "comment",
    "task_id",
    "who_id"
)
SELECT
    "id",
    "status",
    "timestamp",
    "comment",
    "task_id",
    "who_id"
FROM
    {source};
"""

TASKFOLLOWUPRSVP_MIGRATION = """
INSERT INTO {target} (
    "uuid",
    "created_on",
    "task_id",
    "user_id"
)
SELECT
    "uuid",
    "created_on",
    "task_id",
    "user_id"
FROM
    {source} ;
"""

TASKRECOMMENDATION_MIGRATION = """
INSERT INTO {target} (
    "id",
    "condition",
    "text",
    "resource_id",
    "site_id"
)
SELECT
    "id",
    "condition",
    "text",
    "resource_id",
    "site_id"
FROM
    {source} ;
"""


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("resources", "0029_remove_resource_old_tags"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("geomatics", "0004_alter_department_region"),
        ("projects", "0090_topic_for_projects_and_tasks"),
        ("sites", "0002_alter_domain_unique"),
        ("addressbook", "0009_alter_organization_departments"),
    ]

    operations = [
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True, editable=False, verbose_name="order"
                    ),
                ),
                ("public", models.BooleanField(blank=True, default=False)),
                (
                    "priority",
                    models.PositiveIntegerField(
                        blank=True,
                        default=1000,
                        help_text="Plus le chiffre est élevé, plus la recommandation s'affichera en haut.",
                        verbose_name="Priorité",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date de création",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="Dernière mise à jour",
                    ),
                ),
                ("tags", models.CharField(blank=True, default="", max_length=256)),
                (
                    "intent",
                    models.CharField(
                        blank=True, default="", max_length=256, verbose_name="Intention"
                    ),
                ),
                ("content", models.TextField(default="", verbose_name="Contenu")),
                ("deadline", models.DateField(blank=True, null=True)),
                ("visited", models.BooleanField(blank=True, default=False)),
                ("refused", models.BooleanField(blank=True, default=False)),
                ("done", models.BooleanField(blank=True, default=False)),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (0, "proposé"),
                            (1, "en cours"),
                            (2, "blocage"),
                            (3, "terminé"),
                            (4, "pas intéressé·e"),
                            (5, "déjà fait"),
                        ],
                        default=0,
                    ),
                ),
                ("deleted", models.DateTimeField(blank=True, null=True)),
                (
                    "contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="addressbook.contact",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="projects.project",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="resources.resource",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sites.site"
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="projects.topic",
                    ),
                ),
            ],
            options={
                "verbose_name": "action",
                "verbose_name_plural": "actions",
                "ordering": [],
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("on_site", urbanvitaliz.apps.tasks.models.TaskOnSiteManager()),
                (
                    "deleted_on_site",
                    urbanvitaliz.apps.tasks.models.DeletedTaskOnSiteManager(),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TaskRecommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "condition",
                    tagging.fields.TagField(
                        blank=True, max_length=255, null=True, verbose_name="Condition"
                    ),
                ),
                ("text", models.TextField()),
                (
                    "departments",
                    models.ManyToManyField(
                        blank=True,
                        to="geomatics.Department",
                        verbose_name="Départements concernés",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_recommendations",
                        to="resources.resource",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sites.site"
                    ),
                ),
            ],
            managers=[
                ("objects", django.db.models.manager.Manager()),
                (
                    "on_site",
                    urbanvitaliz.apps.tasks.models.TaskRecommendationOnSiteManager(),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TaskFollowupRsvp",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("created_on", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rsvp_followups",
                        to="tasks.task",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rsvp_followups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "rsvp suivi action",
                "verbose_name_plural": "rsvp suivis actions",
            },
        ),
        migrations.CreateModel(
            name="TaskFollowup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "proposé"),
                            (1, "en cours"),
                            (2, "blocage"),
                            (3, "terminé"),
                            (4, "pas intéressé·e"),
                            (5, "déjà fait"),
                        ],
                        null=True,
                    ),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                ("comment", models.TextField(blank=True, default="")),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="followups",
                        to="tasks.task",
                    ),
                ),
                (
                    "who",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_followups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "suivi action",
                "verbose_name_plural": "suivis actions",
            },
        ),
        #
        # move existing data from projects_ to tasks_
        migrations.RunSQL(
            TASK_MIGRATION.format(
                source="projects_task",
                target="tasks_task",
            ),
            reverse_sql=TASK_MIGRATION.format(
                source="tasks_task",
                target="projects_task",
            ),
        ),
        migrations.RunSQL(
            TASKFOLLOWUP_MIGRATION.format(
                source="projects_taskfollowup",
                target="tasks_taskfollowup",
            ),
            reverse_sql=TASKFOLLOWUP_MIGRATION.format(
                source="tasks_taskfollowup",
                target="projects_taskfollowup",
            ),
        ),
        migrations.RunSQL(
            TASKFOLLOWUPRSVP_MIGRATION.format(
                source="projects_taskfollowuprsvp",
                target="tasks_taskfollowuprsvp",
            ),
            reverse_sql=TASKFOLLOWUPRSVP_MIGRATION.format(
                source="tasks_taskfollowuprsvp",
                target="projects_taskfollowuprsvp",
            ),
        ),
        migrations.RunSQL(
            TASKRECOMMENDATION_MIGRATION.format(
                source="projects_taskrecommendation",
                target="tasks_taskrecommendation",
            ),
            reverse_sql=TASKRECOMMENDATION_MIGRATION.format(
                source="tasks_taskrecommendation",
                target="projects_taskrecommendation",
            ),
        ),
    ]
